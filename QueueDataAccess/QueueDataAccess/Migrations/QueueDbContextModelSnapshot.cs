// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QueueDataAccess.Models;

namespace QueueDataAccess.Migrations
{
    [DbContext(typeof(QueueDbContext))]
    partial class QueueDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QueueDataAccess.Models.Counter", b =>
                {
                    b.Property<int>("CounterId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("COunterNo");

                    b.Property<string>("CounterName");

                    b.Property<int?>("CounterTypeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<byte[]>("RowVersion2")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("Timestamp");

                    b.Property<int?>("TransactionId");

                    b.HasKey("CounterId");

                    b.HasIndex("CounterTypeId");

                    b.ToTable("Counters");
                });

            modelBuilder.Entity("QueueDataAccess.Models.CounterType", b =>
                {
                    b.Property<int>("CounterTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CounterName");

                    b.Property<string>("CounterShortName");

                    b.Property<bool>("IsEndpoint");

                    b.HasKey("CounterTypeId");

                    b.ToTable("CounterTypes");
                });

            modelBuilder.Entity("QueueDataAccess.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionSerial");

                    b.Property<int?>("CouterTypeId");

                    b.Property<string>("DeviceSerialNo");

                    b.Property<bool>("IsDesktop");

                    b.HasKey("DeviceId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("QueueDataAccess.Models.TransControl", b =>
                {
                    b.Property<int>("TransControlId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CounterTypeId");

                    b.Property<bool?>("IsSpecial");

                    b.HasKey("TransControlId");

                    b.HasIndex("CounterTypeId");

                    b.ToTable("TransControls");
                });

            modelBuilder.Entity("QueueDataAccess.Models.TransPool", b =>
                {
                    b.Property<int>("TransPoolId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("First");

                    b.Property<bool>("IsSpecial");

                    b.Property<int>("Last");

                    b.Property<int?>("TransControlId");

                    b.Property<DateTime>("TransactionDate");

                    b.HasKey("TransPoolId");

                    b.HasIndex("TransControlId");

                    b.ToTable("TransPools");
                });

            modelBuilder.Entity("QueueDataAccess.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateTimeOrdered");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsServed");

                    b.Property<string>("Name");

                    b.Property<int?>("NextId");

                    b.Property<int?>("PrevId");

                    b.Property<int>("PrioNo");

                    b.Property<byte[]>("RowVersion2")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("Timestamp");

                    b.Property<int?>("TransPoolId");

                    b.HasKey("TransactionId");

                    b.HasIndex("NextId")
                        .IsUnique()
                        .HasFilter("[NextId] IS NOT NULL");

                    b.HasIndex("PrevId")
                        .IsUnique()
                        .HasFilter("[PrevId] IS NOT NULL");

                    b.HasIndex("TransPoolId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("QueueDataAccess.Models.Counter", b =>
                {
                    b.HasOne("QueueDataAccess.Models.CounterType", "CounterType")
                        .WithMany("Counters")
                        .HasForeignKey("CounterTypeId")
                        .HasConstraintName("FK_Counter_CounterTypeId");
                });

            modelBuilder.Entity("QueueDataAccess.Models.TransControl", b =>
                {
                    b.HasOne("QueueDataAccess.Models.CounterType", "CounterType")
                        .WithMany("TransControls")
                        .HasForeignKey("CounterTypeId");
                });

            modelBuilder.Entity("QueueDataAccess.Models.TransPool", b =>
                {
                    b.HasOne("QueueDataAccess.Models.TransControl", "TransControl")
                        .WithMany("TransPools")
                        .HasForeignKey("TransControlId");
                });

            modelBuilder.Entity("QueueDataAccess.Models.Transaction", b =>
                {
                    b.HasOne("QueueDataAccess.Models.Transaction", "NextTrans")
                        .WithOne()
                        .HasForeignKey("QueueDataAccess.Models.Transaction", "NextId")
                        .HasConstraintName("FK_Transaction_NextId");

                    b.HasOne("QueueDataAccess.Models.Transaction", "PrevTrans")
                        .WithOne()
                        .HasForeignKey("QueueDataAccess.Models.Transaction", "PrevId")
                        .HasConstraintName("FK_Transaction_PrevId");

                    b.HasOne("QueueDataAccess.Models.TransPool", "TransPool")
                        .WithMany("Transactions")
                        .HasForeignKey("TransPoolId");
                });
#pragma warning restore 612, 618
        }
    }
}
